{"ast":null,"code":"var _jsxFileName = \"/Users/edwar2/Desktop/pocketprof/src/components/UploadImg.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadImg = () => {\n  _s();\n  const [extractedText, setExtractedText] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef(null);\n  const handleFileChange = async event => {\n    if (event.target.files && event.target.files.length > 0) {\n      const file = event.target.files[0];\n      setExtractedText(''); // Clear the previous extracted text\n      await uploadFile(file);\n    }\n  };\n  const uploadFile = async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    setIsUploading(true);\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setExtractedText(response.data.result); // Ensure that response.data has a 'result' property\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setExtractedText('Error: Could not extract text. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"image/png, image/jpeg\",\n      ref: fileInputRef,\n      style: {\n        marginBottom: '15px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        var _fileInputRef$current;\n        return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n      },\n      disabled: isUploading,\n      children: isUploading ? 'Uploading...' : 'Upload and Parse'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), extractedText && /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: extractedText,\n      readOnly: true,\n      style: {\n        width: '100%',\n        height: '150px',\n        marginTop: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadImg, \"EDWBb7ptkGiADFFdpzmGZoCpH2g=\");\n_c = UploadImg;\nexport default UploadImg;\nvar _c;\n$RefreshReg$(_c, \"UploadImg\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","UploadImg","_s","extractedText","setExtractedText","isUploading","setIsUploading","fileInputRef","handleFileChange","event","target","files","length","file","uploadFile","formData","FormData","append","response","post","headers","data","result","error","console","children","type","onChange","accept","ref","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_fileInputRef$current","current","click","disabled","value","readOnly","width","height","marginTop","_c","$RefreshReg$"],"sources":["/Users/edwar2/Desktop/pocketprof/src/components/UploadImg.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport axios from 'axios';\n\nconst UploadImg: React.FC = () => {\n  const [extractedText, setExtractedText] = useState<string>('');\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files.length > 0) {\n      const file = event.target.files[0];\n      setExtractedText(''); // Clear the previous extracted text\n      await uploadFile(file);\n    }\n  };\n\n  const uploadFile = async (file: File) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    setIsUploading(true);\n\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setExtractedText(response.data.result); // Ensure that response.data has a 'result' property\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setExtractedText('Error: Could not extract text. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        onChange={handleFileChange}\n        accept=\"image/png, image/jpeg\"\n        ref={fileInputRef}\n        style={{ marginBottom: '15px' }}\n      />\n      <button onClick={() => fileInputRef.current?.click()} disabled={isUploading}>\n        {isUploading ? 'Uploading...' : 'Upload and Parse'}\n      </button>\n      {extractedText && (\n        <textarea\n          value={extractedText}\n          readOnly\n          style={{ width: '100%', height: '150px', marginTop: '10px' }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default UploadImg;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}