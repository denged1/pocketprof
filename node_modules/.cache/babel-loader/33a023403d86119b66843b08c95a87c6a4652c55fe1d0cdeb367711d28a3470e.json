{"ast":null,"code":"var _jsxFileName = \"/Users/edwar2/Desktop/pocketprof/src/components/GenFeedback.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenFeedback = ({\n  question,\n  userAnswer,\n  correctAnswer\n}) => {\n  _s();\n  const [feedback, setFeedback] = useState('');\n  useEffect(() => {\n    // Here you can add logic to generate feedback based on the question, userAnswer, and correctAnswer\n    const generatedFeedback = `Feedback based on:\n    Question: ${question}\n    Your Answer: ${userAnswer}\n    Correct Answer: ${correctAnswer}`;\n    setFeedback(generatedFeedback);\n  }, [question, userAnswer, correctAnswer]); // Depend on the props\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"generateFeedback\",\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: feedback,\n      readOnly: true,\n      style: {\n        width: '100%',\n        height: '150px',\n        marginTop: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(GenFeedback, \"NT2w/Qczy/DEDlRLr00QUALflXo=\");\n_c = GenFeedback;\nexport default GenFeedback;\nvar _c;\n$RefreshReg$(_c, \"GenFeedback\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GenFeedback","question","userAnswer","correctAnswer","_s","feedback","setFeedback","generatedFeedback","id","children","value","readOnly","style","width","height","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/edwar2/Desktop/pocketprof/src/components/GenFeedback.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst GenFeedback: React.FC<{\n  question: string;\n  userAnswer: string;\n  correctAnswer: string;\n}> = ({ question, userAnswer, correctAnswer }) => {\n  const [feedback, setFeedback] = useState('');\n\n  useEffect(() => {\n    // Here you can add logic to generate feedback based on the question, userAnswer, and correctAnswer\n    const generatedFeedback = `Feedback based on:\n    Question: ${question}\n    Your Answer: ${userAnswer}\n    Correct Answer: ${correctAnswer}`;\n    \n    setFeedback(generatedFeedback);\n  }, [question, userAnswer, correctAnswer]); // Depend on the props\n\n  return (\n    <div id=\"generateFeedback\">\n      {/* Render the feedback in a read-only textbox */}\n      <textarea value={feedback} readOnly style={{ width: '100%', height: '150px', marginTop: '10px' }} />\n    </div>\n  );\n};\n\nexport default GenFeedback;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAIJ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,iBAAiB,GAAI;AAC/B,gBAAgBN,QAAS;AACzB,mBAAmBC,UAAW;AAC9B,sBAAsBC,aAAc,EAAC;IAEjCG,WAAW,CAACC,iBAAiB,CAAC;EAChC,CAAC,EAAE,CAACN,QAAQ,EAAEC,UAAU,EAAEC,aAAa,CAAC,CAAC,CAAC,CAAC;;EAE3C,oBACEJ,OAAA;IAAKS,EAAE,EAAC,kBAAkB;IAAAC,QAAA,eAExBV,OAAA;MAAUW,KAAK,EAAEL,QAAS;MAACM,QAAQ;MAACC,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjG,CAAC;AAEV,CAAC;AAACf,EAAA,CAvBIJ,WAIJ;AAAAoB,EAAA,GAJIpB,WAIJ;AAqBF,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}