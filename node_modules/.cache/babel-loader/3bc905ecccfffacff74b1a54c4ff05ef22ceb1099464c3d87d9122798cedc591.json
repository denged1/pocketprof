{"ast":null,"code":"var _jsxFileName = \"/Users/edwar2/Desktop/pocketprof/src/components/AnswerBoxes.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport GenFeedback from \"./GenFeedback\";\n\n// Define the props that this component will accept\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnswerBoxes = ({\n  extractedText\n}) => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [userAnswer, setUserAnswer] = useState('');\n  const [correctAnswer, setCorrectAnswer] = useState('');\n  const [contentVisible, setContentVisible] = useState(false); // New state to manage visibility\n  const [feedbackRequested, setFeedbackRequested] = useState(false);\n  const [buttonText, setButtonText] = useState('Generate Explanation');\n  const [feedbackContent, setFeedbackContent] = useState(null);\n  const textareaStyle = {\n    width: '700px',\n    height: '150px',\n    fontFamily: 'Calibri, sans-serif',\n    // Set the font family to Calibri\n    fontSize: '16px' // Set the font size to 12\n  };\n\n  const handleGenerateFeedback = () => {\n    // Set a flag to indicate feedback was requested\n    setFeedbackContent({\n      question,\n      userAnswer,\n      correctAnswer\n    });\n    setButtonText('Regenerate Explanation');\n    setFeedbackRequested(true);\n  };\n\n  // Parse the JSON whenever the extractedText prop changes\n  useEffect(() => {\n    try {\n      const parsedData = JSON.parse(extractedText);\n      setQuestion(parsedData.Question);\n      setUserAnswer(parsedData.YourAnswer);\n      setCorrectAnswer(parsedData.CorrectAnswer);\n    } catch (error) {\n      console.error('Error parsing JSON:', error);\n    }\n  }, [extractedText]);\n  useEffect(() => {\n    setContentVisible(!!extractedText); // The content is visible if extractedText is not empty\n  }, [extractedText]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"answerBoxes\",\n    className: `rounded-box ${contentVisible ? '' : 'hidden'}`,\n    style: {\n      backgroundColor: 'green',\n      color: 'white',\n      padding: '30px',\n      paddingBottom: '30px',\n      borderRadius: '30px',\n      marginTop: '20px',\n      width: '750px',\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          fontWeight: 'bold',\n          marginRight: '610px'\n        },\n        children: \"Question:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: question,\n        onChange: e => setQuestion(e.target.value),\n        style: textareaStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          fontWeight: 'bold',\n          marginRight: '580px'\n        },\n        children: \"Your Answer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userAnswer,\n        onChange: e => setUserAnswer(e.target.value),\n        style: textareaStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          fontWeight: 'bold',\n          marginRight: '550px'\n        },\n        children: \"Correct Answer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: correctAnswer,\n        onChange: e => setCorrectAnswer(e.target.value),\n        style: textareaStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateFeedback,\n      style: {\n        marginTop: '25px',\n        padding: '10px'\n      },\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), feedbackRequested && feedbackContent && /*#__PURE__*/_jsxDEV(GenFeedback, {\n      question: feedbackContent.question,\n      userAnswer: feedbackContent.userAnswer,\n      correctAnswer: feedbackContent.correctAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(AnswerBoxes, \"907MVAFjhiGYYeOAB9chTJmTBQo=\");\n_c = AnswerBoxes;\nexport default AnswerBoxes;\nvar _c;\n$RefreshReg$(_c, \"AnswerBoxes\");","map":{"version":3,"names":["React","useEffect","useState","GenFeedback","jsxDEV","_jsxDEV","AnswerBoxes","extractedText","_s","question","setQuestion","userAnswer","setUserAnswer","correctAnswer","setCorrectAnswer","contentVisible","setContentVisible","feedbackRequested","setFeedbackRequested","buttonText","setButtonText","feedbackContent","setFeedbackContent","textareaStyle","width","height","fontFamily","fontSize","handleGenerateFeedback","parsedData","JSON","parse","Question","YourAnswer","CorrectAnswer","error","console","id","className","style","backgroundColor","color","padding","paddingBottom","borderRadius","marginTop","marginLeft","marginRight","children","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/edwar2/Desktop/pocketprof/src/components/AnswerBoxes.tsx"],"sourcesContent":["import { stringify } from 'querystring';\nimport React, { useEffect, useState } from 'react';\nimport GenFeedback from \"./GenFeedback\";\n\n// Define the props that this component will accept\ntype AnswerBoxesProps = {\n  extractedText: string;\n};\n\nconst AnswerBoxes: React.FC<AnswerBoxesProps> = ({ extractedText }) => {\n  const [question, setQuestion] = useState('');\n  const [userAnswer, setUserAnswer] = useState('');\n  const [correctAnswer, setCorrectAnswer] = useState('');\n  const [contentVisible, setContentVisible] = useState(false); // New state to manage visibility\n  const [feedbackRequested, setFeedbackRequested] = useState(false);\n  const [buttonText, setButtonText] = useState('Generate Explanation');\n  const [feedbackContent, setFeedbackContent] = useState<{\n    question: string;\n    userAnswer: string;\n    correctAnswer: string;\n  } | null>(null);\n  const textareaStyle = {\n    width: '700px',\n    height: '150px',\n    fontFamily: 'Calibri, sans-serif', // Set the font family to Calibri\n    fontSize: '16px', // Set the font size to 12\n  };\n\n  const handleGenerateFeedback = () => {\n    // Set a flag to indicate feedback was requested\n    setFeedbackContent({\n      question,\n      userAnswer,\n      correctAnswer\n    });\n    setButtonText('Regenerate Explanation');\n    setFeedbackRequested(true);\n  };\n\n  // Parse the JSON whenever the extractedText prop changes\n  useEffect(() => {\n    try {\n      const parsedData = JSON.parse(extractedText);\n      setQuestion(parsedData.Question);\n      setUserAnswer(parsedData.YourAnswer);\n      setCorrectAnswer(parsedData.CorrectAnswer);\n    } catch (error) {\n      console.error('Error parsing JSON:', error);\n    }\n  }, [extractedText]);\n\n  useEffect(() => {\n    setContentVisible(!!extractedText); // The content is visible if extractedText is not empty\n  }, [extractedText]);\n\n  return (\n    <div \n      id=\"answerBoxes\" \n      className={`rounded-box ${contentVisible ? '' : 'hidden'}`}\n      style={{\n        backgroundColor: 'green',\n        color: 'white', \n        padding: '30px',\n        paddingBottom: '30px',\n        borderRadius: '30px',\n        marginTop: '20px',\n        width: '750px',\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      }}\n    >\n      {/* Content is always rendered, but visibility is controlled by contentVisible state */}\n      <div>\n        <label style={{ fontWeight: 'bold', marginRight: '610px' }}>Question:</label>\n        <br />\n        <textarea value={question} onChange={(e) => setQuestion(e.target.value)} style={textareaStyle} />\n      </div>\n      <div>\n        <label style={{ fontWeight: 'bold', marginRight: '580px' }}>Your Answer:</label>\n        <br />\n        <textarea value={userAnswer} onChange={(e) => setUserAnswer(e.target.value)} style={textareaStyle} />\n      </div>\n      <div>\n        <label style={{ fontWeight: 'bold', marginRight: '550px' }}>Correct Answer:</label>\n        <br />\n        <textarea value={correctAnswer} onChange={((e) => setCorrectAnswer(e.target.value))} style={textareaStyle} />\n      </div>\n      <button onClick={handleGenerateFeedback} style={{ marginTop: '25px', padding: '10px' }}>{buttonText}</button>\n      {feedbackRequested && feedbackContent &&(\n        <GenFeedback\n          question={feedbackContent.question}\n          userAnswer={feedbackContent.userAnswer}\n          correctAnswer={feedbackContent.correctAnswer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AnswerBoxes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}