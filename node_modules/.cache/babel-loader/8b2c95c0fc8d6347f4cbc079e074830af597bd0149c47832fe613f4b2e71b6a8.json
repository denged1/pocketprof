{"ast":null,"code":"var _jsxFileName = \"/Users/edwar2/Desktop/pocketprof/src/components/UploadImg.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadImg = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [extractedText, setExtractedText] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const handleFileChange = async event => {\n    if (event.target.files && event.target.files[0]) {\n      const newFile = event.target.files[0];\n      setSelectedFile(newFile);\n      setExtractedText(''); // Clear the previous extracted text\n      console.log('File selected:', newFile.name);\n      await handleUpload(newFile); // Trigger upload after file selection\n    }\n  };\n\n  const handleUpload = async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    setIsUploading(true);\n    try {\n      console.log('Attempting to upload file...');\n      const response = await axios.post('http://127.0.0.1:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('File uploaded, response:', response.data);\n      setExtractedText(response.data.result); // Ensure that response.data has a 'result' property\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setExtractedText('Error: Could not extract text. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Please upload an image (png/jpeg): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"image/png, image/jpeg\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => selectedFile && handleUpload(selectedFile),\n      disabled: isUploading,\n      children: isUploading ? 'Uploading...' : 'Upload and Parse Image'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), extractedText && /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: extractedText,\n      readOnly: true,\n      style: {\n        width: '100%',\n        height: '150px',\n        marginTop: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadImg, \"spIaN4/9IdRH+EkOr77tiYGkYLk=\");\n_c = UploadImg;\nexport default UploadImg;\nvar _c;\n$RefreshReg$(_c, \"UploadImg\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","UploadImg","_s","selectedFile","setSelectedFile","extractedText","setExtractedText","isUploading","setIsUploading","handleFileChange","event","target","files","newFile","console","log","name","handleUpload","file","formData","FormData","append","response","post","headers","data","result","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","style","display","onClick","disabled","value","readOnly","width","height","marginTop","_c","$RefreshReg$"],"sources":["/Users/edwar2/Desktop/pocketprof/src/components/UploadImg.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst UploadImg: React.FC = () => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [extractedText, setExtractedText] = useState<string>('');\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const newFile = event.target.files[0];\n      setSelectedFile(newFile);\n      setExtractedText(''); // Clear the previous extracted text\n      console.log('File selected:', newFile.name);\n      await handleUpload(newFile); // Trigger upload after file selection\n    }\n  };\n\n  const handleUpload = async (file: File) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    setIsUploading(true);\n\n    try {\n      console.log('Attempting to upload file...');\n      const response = await axios.post('http://127.0.0.1:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('File uploaded, response:', response.data);\n      setExtractedText(response.data.result); // Ensure that response.data has a 'result' property\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setExtractedText('Error: Could not extract text. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  return (\n    <div>\n      <label>Please upload an image (png/jpeg): </label>\n      <input\n        type=\"file\"\n        onChange={handleFileChange}\n        accept=\"image/png, image/jpeg\"\n        style={{ display: 'none' }}\n      />\n      <button onClick={() => selectedFile && handleUpload(selectedFile)} disabled={isUploading}>\n        {isUploading ? 'Uploading...' : 'Upload and Parse Image'}\n      </button>\n      {extractedText && (\n        <textarea\n          value={extractedText}\n          readOnly\n          style={{ width: '100%', height: '150px', marginTop: '10px' }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default UploadImg;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}